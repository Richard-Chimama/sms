// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("STUDENT")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  student  Student?
  teacher  Teacher?
  parent   Parent?
  notices  Notice[]

  @@index([role])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Student {
  id           String        @id @default(cuid())
  userId       String        @unique
  classId      String
  rollNumber   String
  parentId     String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  class        Class         @relation(fields: [classId], references: [id])
  parent       Parent        @relation(fields: [parentId], references: [id])
  attendances  Attendance[]
  examResults  ExamResult[]
  examSubmissions ExamSubmission[]
  submissions  AssignmentSubmission[]
  feePayments  FeePayment[]

  @@index([classId])
  @@unique([classId, rollNumber], name: "class_roll_number")
}

model Teacher {
  id          String    @id @default(cuid())
  userId      String    @unique
  employeeId  String    @unique
  subjects    Subject[]
  classes     Class[]
  assignments Assignment[]
  timetables  TeacherTimetable[]
  duties      TeacherDuty[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Parent {
  id        String   @id @default(cuid())
  userId    String   @unique
  student   Student?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Class {
  id          String      @id @default(cuid())
  grade       String
  section     String
  teacherId   String
  teacher     Teacher     @relation(fields: [teacherId], references: [id])
  students    Student[]
  subjects    Subject[]
  timetables  TeacherTimetable[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([grade, section])
}

model Subject {
  id          String      @id @default(cuid())
  name        String
  code        String      @unique
  teacherId   String
  classId     String
  teacher     Teacher     @relation(fields: [teacherId], references: [id])
  class       Class       @relation(fields: [classId], references: [id])
  examResults ExamResult[]
  assignments Assignment[]
  exams       Exam[]
  timetables  TeacherTimetable[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Attendance {
  id        String   @id @default(cuid())
  date      DateTime
  status    String   @default("PRESENT") // PRESENT, ABSENT, LATE
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, date])
}

model ExamResult {
  id        String   @id @default(cuid())
  marks     Float
  totalMarks Float
  date      DateTime
  studentId String
  subjectId String
  student   Student  @relation(fields: [studentId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  teacherId   String
  subjectId   String
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  subject     Subject  @relation(fields: [subjectId], references: [id])
  submissions AssignmentSubmission[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([teacherId])
  @@index([subjectId])
}

model AssignmentSubmission {
  id           String     @id @default(cuid())
  assignmentId String
  studentId    String
  content      String
  status       String     @default("SUBMITTED") // SUBMITTED, GRADED
  grade        Float?
  feedback     String?
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  student      Student    @relation(fields: [studentId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([assignmentId, studentId])
  @@index([assignmentId])
  @@index([studentId])
}

model FeePayment {
  id          String    @id @default(cuid())
  studentId   String
  description String
  amount      Float
  dueDate     DateTime
  paidDate    DateTime?
  status      String    @default("PENDING") // PAID, PENDING, OVERDUE
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  student     Student   @relation(fields: [studentId], references: [id])

  @@index([studentId])
}

enum NoticeCategory {
  GENERAL
  STUDENT
  TEACHER
  PARENT
  EXAM
  EVENT
}

model Notice {
  id          String         @id @default(cuid())
  title       String
  content     String
  category    NoticeCategory @default(GENERAL)
  authorId    String
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  pinned      Boolean       @default(false)
  expiresAt   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([category])
  @@index([authorId])
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model TeacherTimetable {
  id        String    @id @default(cuid())
  teacherId String
  classId   String
  subjectId String
  dayOfWeek DayOfWeek
  startTime DateTime  @db.Time()
  endTime   DateTime  @db.Time()
  teacher   Teacher   @relation(fields: [teacherId], references: [id])
  class     Class     @relation(fields: [classId], references: [id])
  subject   Subject   @relation(fields: [subjectId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([teacherId, classId, subjectId, dayOfWeek, startTime])
  @@index([teacherId])
  @@index([classId])
  @@index([subjectId])
}

enum DutyType {
  MORNING_ASSEMBLY
  LUNCH_BREAK
  EVENING_GAMES
  EXAM_SUPERVISION
  EVENT_COORDINATION
}

model TeacherDuty {
  id        String    @id @default(cuid())
  teacherId String
  type      DutyType
  date      DateTime
  startTime DateTime  @db.Time()
  endTime   DateTime  @db.Time()
  notes     String?
  teacher   Teacher   @relation(fields: [teacherId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([teacherId, date, startTime])
  @@index([teacherId])
  @@index([type])
}

model Exam {
  id          String       @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  type        ExamType    @default(REGULAR)
  subjectId   String
  subject     Subject     @relation(fields: [subjectId], references: [id])
  questions   Question[]
  submissions ExamSubmission[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([subjectId])
}

enum ExamType {
  REGULAR
  MIDTERM
  FINAL
  QUIZ
}

model Question {
  id          String   @id @default(cuid())
  examId      String
  text        String
  type        QuestionType @default(MULTIPLE_CHOICE)
  options     Json?    // For multiple choice questions
  answer      String   // Correct answer or marking scheme
  marks      Float
  exam        Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  answers     Answer[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([examId])
}

enum QuestionType {
  MULTIPLE_CHOICE
  SHORT_ANSWER
  LONG_ANSWER
  TRUE_FALSE
}

model Answer {
  id          String   @id @default(cuid())
  questionId  String
  submissionId String
  answer      String
  marks       Float?
  feedback    String?
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  submission  ExamSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([questionId, submissionId])
  @@index([questionId])
  @@index([submissionId])
}

model ExamSubmission {
  id          String   @id @default(cuid())
  examId      String
  studentId   String
  status      ExamSubmissionStatus @default(IN_PROGRESS)
  startedAt   DateTime @default(now())
  submittedAt DateTime?
  totalMarks  Float?
  exam        Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  answers     Answer[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([examId, studentId])
  @@index([examId])
  @@index([studentId])
}

enum ExamSubmissionStatus {
  NOT_STARTED
  IN_PROGRESS
  SUBMITTED
  GRADED
}
