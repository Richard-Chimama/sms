// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("STUDENT")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  student  Student?
  teacher  Teacher?
  parent   Parent?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Student {
  id           String        @id @default(cuid())
  userId       String        @unique
  classId      String
  rollNumber   Int
  parentId     String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  class        Class         @relation(fields: [classId], references: [id])
  parent       Parent        @relation(fields: [parentId], references: [id])
  attendances  Attendance[]
  examResults  ExamResult[]
  assignments  Assignment[]
  feePayments  FeePayment[]

  @@index([classId])
  @@unique([classId, rollNumber], name: "class_roll_number")
}

model Teacher {
  id          String    @id @default(cuid())
  userId      String    @unique
  employeeId  String    @unique
  subjects    Subject[]
  classes     Class[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Parent {
  id        String   @id @default(cuid())
  userId    String   @unique
  student   Student?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Class {
  id          String      @id @default(cuid())
  grade       Int
  section     String
  teacherId   String
  teacher     Teacher     @relation(fields: [teacherId], references: [id])
  students    Student[]
  subjects    Subject[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([grade, section])
}

model Subject {
  id          String      @id @default(cuid())
  name        String
  code        String      @unique
  teacherId   String
  classId     String
  teacher     Teacher     @relation(fields: [teacherId], references: [id])
  class       Class       @relation(fields: [classId], references: [id])
  examResults ExamResult[]
  assignments Assignment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Attendance {
  id        String   @id @default(cuid())
  date      DateTime
  status    String   @default("PRESENT") // PRESENT, ABSENT, LATE
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, date])
}

model ExamResult {
  id        String   @id @default(cuid())
  marks     Float
  totalMarks Float
  date      DateTime
  studentId String
  subjectId String
  student   Student  @relation(fields: [studentId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  status      String   @default("PENDING") // PENDING, SUBMITTED, GRADED
  studentId   String
  subjectId   String
  student     Student  @relation(fields: [studentId], references: [id])
  subject     Subject  @relation(fields: [subjectId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FeePayment {
  id          String    @id @default(cuid())
  studentId   String
  description String
  amount      Float
  dueDate     DateTime
  paidDate    DateTime?
  status      String    @default("PENDING") // PAID, PENDING, OVERDUE
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  student     Student   @relation(fields: [studentId], references: [id])

  @@index([studentId])
}
